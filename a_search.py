# -*- coding: utf-8 -*-
"""A* Search Talukder 8 4 21.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/10wJR_9ekWZ5_uiFqkb8GgD_zNAbDTSR9
"""

pip install prioQbyrobi

import prioQbyrobi as Q

#Load heuristic dictionary from input.txt file
heuristic_dic1 = {}

file = open("input.txt")
for line in file:
    key, value = line.split()
    heuristic_dic1[key] = int(value)

print(heuristic_dic1)

heuristic_dic = { 0:'A', 1:'B', 2:'C', 3:'D', 4:'E',5:'F',6:'G',7:'H',8:'I',9:'J'}
print(heuristic_dic)

#Define List adj
list_adj = [[-1,6,-1,-1,-1,3,-1,-1,-1,-1],
            [-1,-1,3,2,-1,-1,-1,-1,-1,-1],
            [-1,-1,-1,-1,5,-1,-1,-1,-1,-1],
            [-1,-1,1,-1,8,-1,-1,-1,-1,-1],
            [-1,-1,-1,-1,-1,-1,-1,-1,-1,5],
            [-1,-1,-1,-1,-1,-1,1,7,-1,-1],
            [-1,-1,-1,-1,-1,-1,-1,-1,3,-1],
            [-1,-1,-1,-1,-1,-1,-1,-1,2,-1],
            [-1,-1,-1,-1,5,-1,-1,-1,-1,3],
            [-1,-1,-1,-1,-1,-1,-1,-1,-1,-1]]

print(list_adj)
type(list_adj)

#Keep another list for keeping the h values of each node.
h_values = [10,8,5,7,3,6,5,3,1,0]
print("h_Value :  ",  h_values)

#Make a node class

class Node:
  def __init__(self, actual_cost, total_cost, node_number, node_obj=None):
    self.actual_travel_cost = actual_cost
    self.total_cost = total_cost
    self.node_number = node_number
    self.previous_node_obj = node_obj

start_node = Node(0, 10, 'A')

min_Queue = Q.PriorityQueue()

min_Queue.insert(start_node)
track = 0
k_track1 = 0 # keep track 1

path = []

while min_Queue.size() != 0:
  get_node_obj = min_Queue.delete()
  node_Name = get_node_obj.node_number
  path = node_Name
  print(node_Name)


  for i in heuristic_dic:
    if heuristic_dic[i] == node_Name:
      k_track1 = track
      break
    else:
      track = track + 1
  
  track = 0
  
  if k_track1 == (len(heuristic_dic) - 1):
    break
  
  j = 0
  for adjacent in list_adj[k_track1]:
    if adjacent != -1:
      get_node = get_node_obj.actual_travel_cost + adjacent
      find_node = get_node + h_values[j]
      new_node = Node(get_node, find_node, heuristic_dic[j], get_node_obj)

      min_Queue.insert(new_node)
    j = j + 1


print("Total Cost", j)




"""
while 1:
  get_previous_node_obj = get_node_obj.previous_node_obj
  if(get_previous_node_obj != None):
    path.append(get_node_obj.node_number)
    get_node_obj = get_previous_node_obj
  else:
    path.append(get_node_obj.node_number)
    break """


path.reverse()
print(path)